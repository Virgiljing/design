结构性模式
代理模式               -为真实对象提供一个代理，从而控制对真实对象的访问
适配器模式           -使原本由于接口不兼容不能一起工作的类可以一起工作
桥接模式               -处理多层继承结构，处理多维度变化的场景，将各个维度设计成独立的
		         继承结构，使各个维度可以独立的扩展再抽象层建立关联
组合模式               -将对象组合成树状结构以表示“部分和整体”层次结构，是的客户可以统一的额、调用
		          叶子对象和容器
装饰模式               -动态的给一个对象添加二外的功能，比继承灵活
外观模式               -为子系统提供统一的调用接口，使得子系统更加容易使用
享元模式               -运用共享技术有效的实现管理大量颗粒度对象

结构型模式
这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。

适配器模式（Adapter Pattern）
桥接模式（Bridge Pattern）
过滤器模式（Filter、Criteria Pattern）
组合模式（Composite Pattern）
装饰器模式（Decorator Pattern）
外观模式（Facade Pattern）
享元模式（Flyweight Pattern）
代理模式（Proxy Pattern）